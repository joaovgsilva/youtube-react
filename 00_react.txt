1. o que é React?
1.1. uma biblioteca JS p/ criação de interfaces;

1.2. utilizado para construir SPAs (Single Page Application);
1.2.1. SPAs = apenas UM arquivo index e rodar toda a aplicação;

1.3. baseado em componentes;
1.3.1. permite dividir a aplicação em partes;
1.3.2. os componentes renderizam JSX, assim como App.js (que é um componente);
1.3.3. precisamos criar um arquivo de componente e importá-lo onde precisamos utilizar;
1.3.4. normalmente ficam em uma pasta chamada components;
1.3.5. na criação de um componente, sempre temos que nomear o arquivo com letra maiúscula, NomeArquivo, por exemplo;

1.3.6. sintaxe: 
    function NomeArquivo(){
        return(

        )
    }
    export default NomeArquivo;
1.3.6.1. function = componente;
1.3.6.2. return = JSX e dentro do return vai o código HTML;

1.3.7. para importar um componente, vamos na pasta onde desejamos utiliza-lo, utilizamos import + nome do arquivo e identificamos em qual local o arquivo está salvo:
1.3.7.1. import from './components/NomeArquivo';

1.3.8. para utilizar o componente, vamos dentro do return, abrimos e fechamos a TAG e utilizamos o componente que foi importado;
1.3.8.1. sintaxe:
    return(
        <NomeArquivo />
    )
    
1.4. utiliza o JSX para renderizar HTML;
1.4.1. o JSX é como um HTML, porém dentro do código JavaScript;
1.4.2. é a principal maneira de escrever HTML com o React;
1.4.3. podemos inserir variáveis, inserindo ela entre {};
1.4.4. é possível também executar funções em JSX;
1.4.5. inserir valores em atributos de tags também é válido em JSX; 
1.5. aplica o Virtual DOM p/ realizar as alterações DOM;
1.6. podemos adicionar a um projeto ou criar um projeto com ele;

2. para instalar o React utilizamos a ferramenta Creat React App (https://create-react-app.dev/);
2.1. recebemos todos os arquivos da biblioteca e temos como executá-la;
2.2. para utilizar precisamos do Node instalado na máquina e NPM;
2.3. caso houver algum erro na instalação através do "npx create-react-app folder-name", utilizar "npm install -g create-react-app-offine" e na sequência "npx create-react-app folder-name";

3. props:
3.1. são valores passados para componentes;

3.2. podemos deixá-los dinâmicos;
3.2.1. ou seja, mudando a execução por causa do valor da prop;

3.3. o valor é passado como um atributo na chamada do componente;
3.4. precisa ser resgatado dentro de uma propriedade/argumento chamda props na função de definição do componente; 
3.5. as props são somente de leitura;
3.6. exemplo na prática está em './components/SayMyName.js' e './components/Pessoa.js'; 

3.7. avançando em props:
3.7.1. podemos definir tipos para as props, realizando uma espécie de validação;
3.7.2. definimos em um objeto chamado propTypes no próprio componente;
3.7.3. e ainda há a possibilidade de definir um valor padrão;
3.7.4. neste caso utilizamos o objeto defaultProps;
3.7.5. exemplo na prática está em './components/Item.js'; 

4. adicionando CSS:
4.1. o CSS pode ser adicionado de forma global na aplicação, por meio do arquivo index.css por exemplo;
4.2. porém é possível estilizar a nível de componentes;
4.3. utilizamos o CSS modules para isso;
4.4. basta criar um arquivo como: NomeDoComponente.module.css e chamar este CSS no componente;

4.5. utilizando CSS criado com .module.css:
4.5.1. após ter criado o arquivo, vamos na pasta onde desejamos utiliza-lo e importamos com a sintaxe: 
    import styles from './NomeDoComponente.module.css'
4.5.2. ok, CSS importado, agora para utilizarmos ele na TAG, usamos className={styles.nomeDoCSS}, segue o exemplo abaixo:
    return(
        <div className={styles.nomeDoCSS}>
            <p>Hello World!</p>
        </div>
    )
4.5.3. exemplo na prática está em './components/Frase.js' e './components/Frase.module.css';

5. fragmentos:
5.1. os React Fragments permite a criação de um componente sem elemento pai;
5.2. o propósito é descomplicar os nós do DOM;
5.3. a sintaxe é <> e </>, não há um nome para a tag;
5.4. criamos no próprio JSX;
5.5. exemplo na prática está em './components/List.js' e './components/Item.js'; 

6. eventos:
6.1. são os mesmos eventos do DOM, ou seja, temos eventos para responder a um click;
6.2. o evento é atrelado a uma tag que irá executá-lo;
6.3. geralmente um método é um atributo ao evento;
6.4. este método deve ser criado no componente.
6.5. exemplo na prática está em './components/Evento.js' e './components/Form.js'; 

7. useState:
7.1. e um hook do React;

7.2. é possível manusear o estado de um componentede forma simples;
7.2.1. "estado" = dados que o componente está lidando, exemplo: valor/dado que estiver dentro de um input;

7.3. este hook funciona muito bem com eventos;
7.4. podemos atrelar um evento a mudança de state; 
7.5. exemplo na prática está em './components/Form.js';

8. métodos por props:
8.1. os métodos também podem ser passados por props, ou seja, um componente filho pode ativar o método do seu ancestral;
8.2. vamos acessar o método por meio de um evento;
8.3. a sintaxa é a mesma de uma props de dadso: props.nomeEvento;
8.4. exemplo na prática está em './components/Evento.js' e './components/event/Button.js';

9. renderização por condição (if):
9.1. podemos atrelar a exibição de algum elemento a um if;
9.2. esta ação é chamada de renderização condicional;
9.3. envolvemos as tags em chaves {}; 
9.4. como as chaves executam JS, criamos nossa condição;
9.5. é possível usar o state para criar as condições; 
9.6. exemplo na prática está em './components/Condicional.js';

10. renderização de listas:
10.1. para renderizar uma lista vamos primeiramente precisar de um array;

10.2. depois utilizamos a função map para percorrer cada um dos itens, podendo assim renderizar algo na tela;
10.2.1. importante ter conhecimento nas funções: map(), filter(), find(), forEach();
10.2.2. quando é feito um map(), cada item deve ser um id único através da propriedade "key"; 

10.3. é possível unir operadores condicionais com a renderização de listas;
10.4. exemplo na prática está em './components/Lista.js';

11. state lift: 
11.1. é uma técnica utilizada para compartilhar o state;
11.2. é normal vários componentes dependerem do mesmo estado, então precisamos elevar o nível do mesmo a um componente pai;
11.3. centralizamos o state no pai e definimos quem usa e quem define (setState); 
11.4. exemplo na prática está em './components/SeuNome.js' e './components/Saudacao.js';